//**************************************************************************************************************************************************************
//		インクルードファイル
//**************************************************************************************************************************************************************
#include "StdAfx.h"
#include "CDX9TextureLoader.h"
#include <d3d9.h>
#include <d3dx9tex.h>
#include "Utility.h"


using namespace spine;


//**************************************************************************************************************************************************************
//		テクスチャーローダークラス
//**************************************************************************************************************************************************************

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//		初期化
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
bool CDX9TextureLoader::Init( LPDIRECT3DDEVICE9 pD3DDev )
{
	m_pD3DDev = pD3DDev;
	return true;
}


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//		テクスチャ読み込み(必要情報はpage側に設定される
//
//		テクスチャ読み込み失敗時の挙動は不十分状態
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void CDX9TextureLoader::load( AtlasPage &page, const String &path )
{
	LPDIRECT3DTEXTURE9 pTex;
	HRESULT hr =D3DXCreateTextureFromFile( m_pD3DDev, path.buffer(), &pTex );
	if( FAILED( hr ) )
	{
		DebugOut( "D3DXCreateTextureFromFile Error : 0x%08x", hr );
		return;
	}


	// フィルタ・繰り返し設定の反映(DX9ではテクスチャ側に設定する必要はなし)
	//if( page.magFilter == TextureFilter_Linear ) texture->setSmooth( true );
	//if( page.uWrap == TextureWrap_Repeat && page.vWrap == TextureWrap_Repeat ) texture->setRepeated( true );


	// テクスチャサイズの取得
	D3DSURFACE_DESC desc;
	hr = pTex->GetLevelDesc( 0, &desc );
	if( FAILED( hr ) )
	{
		DebugOut( "GetLevelDesc Error : 0x%08x", hr );
		return;
	}


	// レンダーオブジェクトとして登録
	page.setRendererObject( pTex );


	// テクスチャ座標の算出・設定
	page.width = desc.Width;
	page.height = desc.Height;
}


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//		テクスチャ解放
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void CDX9TextureLoader::unload( void *texture )
{
	LPDIRECT3DTEXTURE9 pTex = reinterpret_cast<LPDIRECT3DTEXTURE9>(texture);
	if( pTex != nullptr )
	{
		pTex->Release();
		pTex = nullptr;
	}
}


